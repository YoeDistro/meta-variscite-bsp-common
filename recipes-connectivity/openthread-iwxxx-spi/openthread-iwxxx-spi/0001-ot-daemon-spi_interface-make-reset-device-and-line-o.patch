From 2503e8abd904353c1ecbb0a4c48e4434a45351d9 Mon Sep 17 00:00:00 2001
From: Nate Drude <nate.d@variscite.com>
Date: Tue, 2 Jan 2024 16:52:06 -0600
Subject: [PATCH] ot-daemon: spi_interface: make reset device and line optional

The VAR-SOM-MX93 IW612 802.15.4 and bluetooth share a gpio reset line.
Resetting one will reset the other.

Further, the Bluetooth hci interface supports an in-band reset which
requires the firmware to be reloaded. This will also reset the
802.15.4 interface.

Normally, openthread requires gpio-reset-device and gpio-reset-line
arguments. However, this is not desireable for the VAR-SOM-MX93, because
openthread will reset bluetooth whenever it is started.

This patch makes the gpio-reset-device and gpio-reset-line arguments
optional.

Upstream-status: Innapropriate [Variscite Specific]

Signed-off-by: Nate Drude <nate.d@variscite.com>
Signed-off-by: FrancescoFerraro <francesco.f@variscite.com>
Signed-off-by: Alifer Moraes <alifer.m@variscite.com>
---
 src/posix/platform/spi_interface.cpp | 18 +++++++++++++++---
 1 file changed, 15 insertions(+), 3 deletions(-)

diff --git a/src/posix/platform/spi_interface.cpp b/src/posix/platform/spi_interface.cpp
index 4caa97769..c7e477c7e 100644
--- a/src/posix/platform/spi_interface.cpp
+++ b/src/posix/platform/spi_interface.cpp
@@ -127,13 +127,13 @@ otError SpiInterface::Init(ReceiveFrameCallback aCallback, void *aCallbackContex
 
     spiGpioIntDevice   = mRadioUrl.GetValue("gpio-int-device");
     spiGpioResetDevice = mRadioUrl.GetValue("gpio-reset-device");
-    if (!spiGpioIntDevice || !spiGpioResetDevice)
+    if (!spiGpioIntDevice)
     {
         DieNow(OT_EXIT_INVALID_ARGUMENTS);
     }
 
     SuccessOrDie(mRadioUrl.ParseUint8("gpio-int-line", spiGpioIntLine));
-    SuccessOrDie(mRadioUrl.ParseUint8("gpio-reset-line", spiGpioResetLine));
+    VerifyOrDie(mRadioUrl.ParseUint8("gpio-reset-line", spiGpioResetLine) != OT_ERROR_INVALID_ARGS, OT_EXIT_INVALID_ARGUMENTS);
     VerifyOrDie(mRadioUrl.ParseUint8("spi-mode", spiMode) != OT_ERROR_INVALID_ARGS, OT_EXIT_INVALID_ARGUMENTS);
     VerifyOrDie(mRadioUrl.ParseUint32("spi-speed", spiSpeed) != OT_ERROR_INVALID_ARGS, OT_EXIT_INVALID_ARGUMENTS);
     VerifyOrDie(mRadioUrl.ParseUint32("spi-reset-delay", spiResetDelay) != OT_ERROR_INVALID_ARGS,
@@ -160,7 +160,14 @@ otError SpiInterface::Init(ReceiveFrameCallback aCallback, void *aCallbackContex
         LogNote("SPI interface enters polling mode.");
     }
 
-    InitResetPin(spiGpioResetDevice, spiGpioResetLine);
+    if (spiGpioResetDevice)
+    {
+        InitResetPin(spiGpioResetDevice, spiGpioResetLine);
+    } else
+    {
+        LogNote("No gpio-reset-device provided");
+    }
+
     InitSpiDev(mRadioUrl.GetPath(), spiMode, spiSpeed);
 
     mReceiveFrameCallback = aCallback;
@@ -312,6 +319,11 @@ exit:
 
 void SpiInterface::TriggerReset(void)
 {
+    if (mResetGpioValueFd < 0) {
+        LogNote("Hardware reset skipped because no pin is provided");
+        return;
+    }
+
     // Set Reset pin to low level.
     SetGpioValue(mResetGpioValueFd, 0);
 
-- 
2.43.0

